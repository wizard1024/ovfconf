#!/bin/bash

# utility to change host configuration from OVF environment
# typically called from boot script ('boot.ovfenv'), does nothing w/o OVF env
# full set of properties is like this
#    <Property oe:key="hostname" oe:value="falcon"/>
#    <Property oe:key="domain" oe:value="e1.maxidom.ru"/>
#    <Property oe:key="ip" oe:value="10.72.210.3"/>
#    <Property oe:key="netmask" oe:value="24"/>
#    <Property oe:key="gateway" oe:value="10.72.210.254"/>
#    <Property oe:key="dns" oe:value="10.72.131.1,10.72.131.2"/>
#    <Property oe:key="ntp" oe:value="ntp1.e1.maxidom.ru, ntp2.e1.maxidom.ru"/>
#    <Property oe:key="syslog" oe:value="log.e1.maxidom.ru"/>
#    <Property oe:key="relay" oe:value="smtp.e1.maxidom.ru"/>
# of those only "hostname" and "ip" are mandatory

if [[ ! -z $1 ]]; then
  # test run
  #PREFIX=$(dirname $0)
  #PREFIX=$(pwd)
  PREFIX=.
  OVF_FILE=$PREFIX/ovfEnv.xml
  LOG_FILE=$PREFIX/ovfconf.log
  ETC=$PREFIX/etc
else
  # probably 
  OVF_FILE=/tmp/ovfEnv.xml
  LOG_FILE=/tmp/ovfconf.log
  ETC=/etc 
fi

# check that new domain is ending with with suffix, if set
#CHECK_DOMAIN_SUFFIX=maxidom.ru
CHECK_DOMAIN_SUFFIX=

# rpctool binary: new from open-vm-tools, fallback to classic if not found
RPCTOOL=/usr/bin/vmware-rpctool
if [[ ! -x $RPCTOOL ]]; then
  RPCTOOL=/usr/lib/vmware-tools/sbin/vmware-rpctool 
fi

log_msg() {
  local msg=$1
  echo "`date \"+%b %d %T\"` $msg"
  if [[ ! -z $LOG_FILE ]]; then
    echo "`date \"+%b %d %T\"` $msg" >> $LOG_FILE
  fi
}

## dump OVF from environment, return 0 on success, 1 if none found
get_ovf_xml() {
  local file_name=$1
  rm $OVF_FILE >/dev/null 2>&1
  if [[ ! -z $file_name && -e $file_name ]]; then
    cp $file_name $OVF_FILE
  else
    if [[ ! -x $RPCTOOL ]]; then
      log_msg "ERROR: no vmware-rpctool found and no file given, cannot get OVF env"
      exit 1
    fi
    $RPCTOOL 'info-get guestinfo.ovfEnv' > $OVF_FILE 2>/dev/null
  fi
  touch $OVF_FILE 
  if [[ $(wc -l $OVF_FILE | awk '{print $1}') != 0 ]]; then
    log_msg "NOTE: got OVF file"
    return 0
  else
    # log_msg "INFO: no OVF environment found"
    rm $OVF_FILE
    return 1
  fi
}

get_ovf_var() {
  export KEY=$1 && perl -ne 'print "$1\n" if /<Property \S+.key="$ENV{"KEY"}" \S+:value="([^"]+)"\/>/' $OVF_FILE | tr -d ' '
}

## main
# test run: rm -rf etc && cp -r etc_phoenix/ etc && ./reconf_from_ovf ovfEnv.rhino.short.xml 

## check platform
if [[ ! (-r "$ETC/redhat-release" || -r "$ETC/SuSE-release" || -r "$ETC/debian_version") ]]; then
  log_msg "ERROR: only Debian, SLES and CentOS/RHEL are supported"
  exit 1
fi

## clear log
rm $LOG_FILE >/dev/null 2>&1
touch $LOG_FILE

## get env
get_ovf_xml $1
if [[ $? == 1 ]]; then
  rm $LOG_FILE
  exit 0
fi

## common settings
export resolv_conf="$ETC/resolv.conf"
#export if0=$(ip route show | perl -ne 'print $1 if /default via \S+ dev (\S+)/')
#export if0=ens160
# also: affects /etc/hosts, /etc/passwd

## platform and version specific
if [[ -r "$ETC/debian_version" ]]; then
  export platform="debian"
  release=$(cat $ETC/debian_version | cut -d"." -f 1)
  if [[ $release != 7 ]]; then
    log_msg "ERROR: Debian version 7.x is required (you have $release)"
    exit 1
  fi  
  export netcfg_path="network"
  export hostname_conf="$ETC/hostname"
  #export if0=$(ls $ETC/$netcfg_path/network | perl -ane 'if (/ifcfg-(?!lo)(\S+)/) {print $1; exit 0}')
  export iface_conf="$ETC/$netcfg_path/interfaces"
  export route_conf=""
fi
if [[ -r "$ETC/SuSE-release" ]]; then
  export platform="suse"
  export netcfg_path="sysconfig/network"
  export hostname_conf="$ETC/hostname"
  #export if0=$(ls $ETC/$netcfg_path/network | perl -ane 'if (/ifcfg-(?!lo)(\S+)/) {print $1; exit 0}')
  export iface_conf="$ETC/$netcfg_path/ifcfg-eth0"
  export route_conf="$ETC/$netcfg_path/routes"
fi
## get current values
export old_hostname=$(cat $hostname_conf | cut -d. -f1)
export old_domain=$(cat $hostname_conf | cut -d. -f2-)
#export old_ip=$(cat $iface_conf | sed -n '/iface eth0/ {n;p}' | cut -d " " -f 10)
export old_ip=$(cat $iface_conf | perl -ne 'print $2 if /IPADDR=(\W?)([0-9.]+)/')
#export old_netmask=$(cat $iface_conf | sed -n '/iface eth0/ {n;n;p}' | cut -d " " -f 10)
export old_netmask=$(cat $iface_conf | grep ^IPADDR | cut -d "/" -f 2 | cut -d "'" -f 1)
#export old_gw=$(cat $iface_conf | sed -n '/iface eth0/ {n;n;n;p}' | cut -d " " -f 10)
if [[ ! -z $route_conf ]]; then 
  export old_gw=$(cat $route_conf | grep 'default' | cut -d' ' -f2)
else 
  export old_gw=$(cat $iface_conf | perl -ne 'print $2 if /GATEWAY=(\W?)([0-9.]+)/')
fi
export old_dns=$(cat $resolv_conf | awk '/^nameserver / {print $2}' | paste -sd ',')

## check for mandatory params
if [[ "X$old_hostname" == "X" || "X$old_ip" == "X" ]]; then
  log_msg "ERROR: old hostname or ip missed (something is wrong), exiting"
  exit 1
fi

## get values from ovf
export new_hostname=$(get_ovf_var "hostname")
export new_netmask=$(get_ovf_var "netmask")
export new_domain=$(get_ovf_var "domain") 
export new_ip=$(get_ovf_var "ip")
export new_gw=$(get_ovf_var "gateway")
export new_dns=$(get_ovf_var "dns")

## some checks
if [[ "X$new_hostname" == "X" ]]; then
  log_msg "ERROR: new hostname is not found, exiting"
  exit 0
fi

if [[ "X$new_ip" == "X" ]]; then
  log_msg "ERROR: new ip is not found, exiting"
  exit 0
fi

if [[ "X$new_netmask" == "X" ]]; then
  log_msg "ERROR: new netmask is not found, exiting"
  exit 0
fi

if [[ $new_hostname == $old_hostname && ("X$new_domain" == "X" || $new_domain == $old_domain) ]]; then
  log_msg "ERROR: new hostname is same as old ($new_hostname), exiting"
  exit 0
fi

if [[ $new_ip == $old_ip && $new_netmask == $old_netmask && $new_gw == $old_gw ]]; then
  log_msg "ERROR: new ip/netmask, gw is same as old ($new_ip)/($new_netmask), gw: $new_gw exiting"
  exit 0
fi

log_msg "INFO: platform: $platform, release $release"
log_msg "INFO: old name: $old_hostname.$old_domain"
log_msg "INFO: old ip:   ${old_ip}/${old_netmask}, gw: $old_gw"
log_msg "INFO: old dns:  $old_dns"
log_msg "INFO: new name: $new_hostname.$new_domain"
log_msg "INFO: new ip:   ${new_ip}/${new_netmask}, gw: $new_gw"
[[ ! -z $new_dns ]] && log_msg "INFO: new dns:  $new_dns"

## first, host name and main ip changes
new_domain=${new_domain:-$old_domain}
log_msg "NOTE: changing hostname to $new_hostname.$new_domain";

log_msg "INFO:  setting hostname"
hostname "$new_hostname.$new_domain"

log_msg "INFO:  changing $ETC/hosts"
cat > $ETC/hosts <<EOF
127.0.0.1      localhost

$old_ip        $old_hostname $old_hostname.$old_domain
$new_ip        $new_hostname $new_hostname.$new_domain
EOF

log_msg "INFO:  changing $hostname_conf"
#echo "$new_hostname.$new_domain" > $hostname_conf
hostnamectl set-hostname "$new_hostname.$new_domain"

## change ip
log_msg "NOTE: chainging main ip to $new_ip"
log_msg "INFO:  changing $iface_conf config"
#perl -pi -e 's/address (\W?)[0-9.]+/address \1$ENV{new_ip}/' $iface_conf
perl -pi -e 's/IPADDR=(\W?)[0-9.]+/IPADDR=\1$ENV{new_ip}/' $iface_conf

## change netmask
#log_msg "NOTE: chainging netmask to $new_netmask"
#log_msg "INFO:  changing $iface_conf config"
#perl -pi -e 's/netmask (\W?)[0-9.]+/netmask \1$ENV{new_netmask}/' $iface_conf
sed -i "s/NETMASK=.*/NETMASK='${new_netmask}'/" $iface_conf

## change gateway: routes and and iface config 
#perl -pi -e 's/gateway.*/gateway $ENV{new_gw}/' $iface_conf
echo "default $new_gw - -" > $route_conf

## resolv.conf: if domain or dns changed
if [[ $new_domain != $old_domain && (! -z $new_dns && $new_dns != $old_dns) ]]; then
  new_dns1=$(echo $new_dns | awk -F"[, ;]+" '{print $1}')
  new_dns2=$(echo $new_dns | awk -F"[, ;]+" '{print $2}')
  log_msg "NOTE: setting $resolv_conf DNS to $new_dns"
  echo "domain $new_domain"   >  $resolv_conf
  echo "search $new_domain"   >> $resolv_conf
  echo "nameserver $new_dns1" >> $resolv_conf
  if [[ ! -z $new_dns2 ]]; then
    echo "nameserver $new_dns2" >> $resolv_conf
  fi
  if [[ $(grep -c -E "dns-nameservers" $iface_conf) != "0" ]]; then
    perl -pi -e 's/dns-nameservers.*/dns-nameservers $ENV{new_dns}/' $iface_conf
  fi
fi

## checking resluts
export cur_hostname=$(cat $hostname_conf | cut -d. -f1)
export cur_domain=$(cat $hostname_conf | cut -d. -f2-)
export cur_ip=$(cat $iface_conf | sed -n '/iface eth0/ {n;p}' | cut -d " " -f 10)
export cur_netmask=$(cat $iface_conf | sed -n '/iface eth0/ {n;n;p}' | cut -d " " -f 10)
export cur_gw=$(cat $iface_conf | sed -n '/iface eth0/ {n;n;n;p}' | cut -d " " -f 10)
export cur_dns=$(cat $resolv_conf | awk '/^nameserver / {print $2}' | paste -sd ',')

log_msg "INFO: cur name: $cur_hostname.$cur_domain"
log_msg "INFO: cur ip:   $(ip a | sed -n '/eth0/ {n;n;p}'), gw: $(ip ro | grep default)"
log_msg "INFO: cur dns:  $cur_dns"

ifdown eth0
ifup eth0
